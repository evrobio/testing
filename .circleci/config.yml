version: 2
jobs:
  # This runs foreman, end-to-end, and illumina tests.
  # These are grouped together because in total they take less time than our other tests individually.
  main_tests:
    working_directory: ~/refinebio
    machine:
      image: ubuntu-1604:202004-01
      docker_layer_caching: true
    steps:
      - checkout

      # Clean up stuff circle provides that we don't need.
      - run: sudo ./.circleci/cleanup_instance.sh

      # Setup Postgres in a Container
      - run: ./scripts/run_postgres.sh
      - run: ./scripts/run_es.sh
      # Let Postgres start up.
      - run: sleep 30
      # Finish setting up Postgres now that it's running.
      - run: ./scripts/install_db_docker.sh

      # Install our application. Provides the data_refinery_common package for the other images.
      - run: chmod -R a+wr common
      - run: ./scripts/update_models.sh

      # Update ES models
      - run: ./scripts/rebuild_es_index.sh

      # Update to newest TLS certs
      - run: sudo apt-get update && sudo apt-get install -y ca-certificates

      # Install Nomad
      - run: sudo ./scripts/install_nomad.sh
        # Start Nomad and register jobs.
      - run:
          command: sudo -E ./scripts/run_nomad.sh -e test

      - run: ./scripts/prepare_image.sh -i no_op -s workers -d localhost:5000
      - run: docker push localhost:5000/dr_no_op
      - run: ./scripts/prepare_image.sh -i downloaders -s workers -d localhost:5000
      - run: docker push localhost:5000/dr_downloaders

      # Run Downloader Tests
      # Running these in the same job as the common tests is good
      # because their dockerfiles are very similar so a lot of the
      # build time is saved by only building those layers once.
      - run: sudo chown -R circleci:circleci workers/test_volume/
      - run:
          command: .circleci/filter_tests.sh -t downloaders
          no_output_timeout: 1h

      # Run Foreman Tests
      - run: mkdir -p test_volume && chmod -R a+rw test_volume && sudo chown -R circleci:circleci test_volume

      # The foreman includes the end-to-end tests, but some of these
      # require docker images which are not built in this
      # workflow. Therefore we exclude salmon, affymetrix, and
      # transcriptome and let those end-to-end tests get run in the
      # workflows that include building those images.
      - run: ./foreman/run_tests.sh --exclude-tag=salmon --exclude-tag=transcriptome --exclude-tag=affymetrix
      - run: .circleci/upload_test_coverage.sh foreman

      # Run NO_OP tests
      - run: sudo chown -R circleci:circleci workers/test_volume/
      - run: .circleci/filter_tests.sh -t no_op

      # Run QN tests.
      - run: sudo chown -R circleci:circleci workers/test_volume/
      - run:
          command: .circleci/filter_tests.sh -t qn
          no_output_timeout: 1h

  common_smasher_tests:
    working_directory: ~/refinebio
    machine:
      image: ubuntu-1604:202004-01
    steps:
      - checkout

      # Clean up stuff circle provides that we don't need.
      - run: sudo ./.circleci/cleanup_instance.sh

      # Setup Postgres in a Container
      - run: ./scripts/run_postgres.sh
      - run: ./scripts/run_es.sh
      # Let Postgres start up.
      - run: sleep 30
      # Finish setting up Postgres now that it's running.
      - run: ./scripts/install_db_docker.sh

      # Install our application. Provides the data_refinery_common package for the other images.
      - run: chmod -R a+wr common
      - run: ./scripts/update_models.sh

      # Run Common Tests.
      - run: mkdir -p test_volume && chmod -R a+rw test_volume && sudo chown -R circleci:circleci test_volume
      - run: ./common/run_tests.sh
      - run: .circleci/upload_test_coverage.sh common

      - run: ./scripts/prepare_image.sh -i smasher -s workers -d localhost:5000

      # Run Smasher tests.
      - run: sudo chown -R circleci:circleci workers/test_volume/
      - run:
          command: .circleci/filter_tests.sh -t smasher
          # Smashing can apparently take a long time on CI
          no_output_timeout: 1h

      # Run Janitor tests.
      - run: sudo chown -R circleci:circleci workers/test_volume/
      - run:
          command: .circleci/filter_tests.sh -t janitor
          no_output_timeout: 1h

      # Run Compendia tests.
      - run: sudo chown -R circleci:circleci workers/test_volume/
      - run:
          command: .circleci/filter_tests.sh -t compendia
          no_output_timeout: 1h

  syntax_test:
    working_directory: ~/refinebio
    docker:
      - image: circleci/python:3.6.4
    steps:
      - checkout

      - run:
          name: Install build & test dependencies
          command: sudo pip3 install pre-commit==1.21.0

      - run:
          name: Run pre-commit hooks on all files
          command: pre-commit run --all-files --show-diff-on-failure

  # This tests workers tests tagged as 'salmon'
  salmon_and_api_tests:
    working_directory: ~/refinebio
    machine:
      image: ubuntu-1604:202004-01
    steps:
      - checkout

      # Clean up stuff circle provides that we don't need.
      - run: sudo ./.circleci/cleanup_instance.sh

      # Setup Postgres in a Container
      - run: ./scripts/run_postgres.sh
      - run: ./scripts/run_es.sh
      # Let Postgres start up.
      - run: sleep 30
      # Finish setting up Postgres now that it's running.
      - run: ./scripts/install_db_docker.sh

      # Install our application. Provides the data_refinery_common package for the other images.
      - run: chmod -R a+wr common
      - run: ./scripts/update_models.sh

      # Update ES models
      - run: ./scripts/rebuild_es_index.sh

      # Run API Tests.
      - run: mkdir -p test_volume && chmod -R a+rw test_volume && sudo chown -R circleci:circleci test_volume
      - run: ./api/run_tests.sh
      - run: .circleci/upload_test_coverage.sh api

      - run:
          command: .circleci/filter_tests.sh -t salmon
          no_output_timeout: 1h

      # Install Nomad
      - run: sudo ./scripts/install_nomad.sh
        # Start Nomad and register jobs.
      - run:
          command: sudo -E ./scripts/run_nomad.sh -e test

      # For the salmon end-to-end tests.
      - run: ./scripts/prepare_image.sh -i downloaders -s workers -d localhost:5000
      - run: docker push localhost:5000/dr_downloaders
      - run: ./scripts/prepare_image.sh -i transcriptome -s workers -d localhost:5000
      - run: docker push localhost:5000/dr_transcriptome
      # This docker image should have already been built, but with the wrong dockerhub repo.
      - run: ./scripts/prepare_image.sh -i salmon -s workers -d localhost:5000
      - run: docker push localhost:5000/dr_salmon

      # Containers run as a different user so we need to give them permission to the test directory.
      - run: mkdir -p test_volume && chmod -R a+rw test_volume && sudo chown -R circleci:circleci test_volume
      - run: ./foreman/run_tests.sh --tag=salmon --tag=transcriptome
      - run: .circleci/upload_test_coverage.sh foreman

  tx_illumina_tests:
    working_directory: ~/refinebio
    machine:
      image: ubuntu-1604:202004-01
    steps:
      - checkout

      # Clean up stuff circle provides that we don't need.
      - run: sudo ./.circleci/cleanup_instance.sh

      # Setup Postgres in a Container
      - run: ./scripts/run_postgres.sh
      - run: ./scripts/run_es.sh
      # Let Postgres start up.
      - run: sleep 30
      # Finish setting up Postgres now that it's running.
      - run: ./scripts/install_db_docker.sh

      # Install our application. Provides the data_refinery_common package for the other images.
      - run: chmod -R a+wr common
      - run: ./scripts/update_models.sh

      - run: ./scripts/prepare_image.sh -i transcriptome -s workers
      - run: .circleci/filter_tests.sh -t transcriptome

      # Files created by containers are owned by the user ubuntu, which prevents workers/run_tests.sh
      # from making sure all the files in workers/test_volume have read/write permissions.
      - run: sudo chown -R circleci:circleci workers/test_volume/

      # Run Illumina tests.
      # - run: .circleci/filter_tests.sh -t illumina

      # Files created by containers are owned by the user ubuntu, which prevents workers/run_tests.sh
      # from making sure all the files in workers/test_volume have read/write permissions.
      - run: sudo chown -R circleci:circleci workers/test_volume/

      # We've been running out of space while downloading the Affy
      # image, so clear out other images to ensure enough space for it.
      - run: docker rm $(docker ps -qa --no-trunc --filter "status=exited") || true
      - run: docker image rm ccdlstaging/dr_transcriptome
      # - run: docker image rm ccdlstaging/dr_illumina

  affy_agilent_tests:
    machine:
      image: ubuntu-1604:202004-01
    working_directory: ~/refinebio
    steps:
      - checkout

      # Clean up stuff circle provides that we don't need.
      - run: sudo ./.circleci/cleanup_instance.sh

      # Setup Postgres in a Container
      - run: ./scripts/run_postgres.sh
      - run: ./scripts/run_es.sh
      # Let Postgres start up.
      - run: sleep 30
      # Finish setting up Postgres now that it's running.
      - run: ./scripts/install_db_docker.sh

      # Install our application. Provides the data_refinery_common package for the other images.
      - run: chmod -R a+wr common
      - run: ./scripts/update_models.sh

      - run:
          command: .circleci/filter_tests.sh -t affymetrix
          # This takes a while because the affymetrix image is huge
          no_output_timeout: 1h

      # Files created by containers are owned by the user ubuntu, which prevents workers/run_tests.sh
      # from making sure all the files in workers/test_volume have read/write permissions.
      - run: sudo chown -R circleci:circleci workers/test_volume/

      # This doesn't take as long because the image has already been pulled.
      - run: .circleci/filter_tests.sh -t agilent

      # Update ES models
      - run: ./scripts/rebuild_es_index.sh

      # Install Nomad
      - run: sudo ./scripts/install_nomad.sh
        # Start Nomad and register jobs.
      - run:
          command: sudo -E ./scripts/run_nomad.sh -e test

      # The foreman includes the end-to-end tests. One of these
      # end-to-end tests is specific to affymetrix, so we run it here
      # since we have the image for it, but we also need the downloaders image.
      - run: ./scripts/prepare_image.sh -i downloaders -s workers -d localhost:5000
      - run: docker push localhost:5000/dr_downloaders

      # This image was built by the affymetrix workers tests, just
      # gotta retag it so it can go into the local docker repo.
      - run: docker tag ccdlstaging/dr_affymetrix:latest localhost:5000/dr_affymetrix:latest
      - run: docker push localhost:5000/dr_affymetrix

      # Containers run as a different user so we need to give them permission to the test directory.
      - run: mkdir -p test_volume && chmod -R a+rw test_volume && sudo chown -R circleci:circleci test_volume
      - run:
          command: ./foreman/run_tests.sh --tag=affymetrix
          # This takes more than 10 minutes, but not much.
          no_output_timeout: 20m
      - run: .circleci/upload_test_coverage.sh foreman

  deploy:
    machine:
      image: ubuntu-1604:202004-01
    working_directory: ~/refinebio
    steps:
      - checkout
      - run: ./.circleci/install_git_decrypt.sh
      - run: ./.circleci/git_decrypt.sh
      - run:
          command: ./.circleci/remote_deploy.sh
          no_output_timeout: 4h # Building images and createing postgres instances can take a while.
      - run: ./.circleci/slackpost.sh robots deploybot

workflows:
  version: 2
  test-and-deploy:
    jobs:
      # test jobs will be triggered by:
      # - any branch commit, or:
      # - tag commits whose names start with letter "v".
      - main_tests:
          filters:
            # To allow tag commits whose name start with "v" to trigger
            # "test" job, an explicit "tags" filter is required here.
            tags:
              only: /v.*/
      - common_smasher_tests:
          filters:
            # To allow tag commits whose name start with "v" to trigger
            # "test" job, an explicit "tags" filter is required here.
            tags:
              only: /v.*/
      - syntax_test:
          filters:
            # To allow tag commits whose name start with "v" to trigger
            # "test" job, an explicit "tags" filter is required here.
            tags:
              only: /v.*/
      - salmon_and_api_tests:
          filters:
            # To allow tag commits whose name start with "v" to trigger
            # "test" job, an explicit "tags" filter is required here.
            tags:
              only: /v.*/
      - tx_illumina_tests:
          filters:
            # To allow tag commits whose name start with "v" to trigger
            # "test" job, an explicit "tags" filter is required here.
            tags:
              only: /v.*/
      - affy_agilent_tests:
          filters:
            # To allow tag commits whose name start with "v" to trigger
            # "test" job, an explicit "tags" filter is required here.
            tags:
              only: /v.*/

      # "deploy" job will be triggered ONLY by tag commits whose name
      # start with letter "v".
      - deploy:
          requires:
            - main_tests
            - common_smasher_tests
            - syntax_test
            - salmon_and_api_tests
            - tx_illumina_tests
            - affy_agilent_tests
          filters:
            # No branch commit will ever trigger this job.
            branches:
              ignore: /.*/
            tags:
              # Only run deploys on versions tagged with /v.*/, unless regex
              # lookahead finds `-hotfix` at the end of the version tag
              only: /^v((?!-hotfix$).)*$/

  hotfix-deploy:
    jobs:
      - deploy:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v.*-hotfix/
